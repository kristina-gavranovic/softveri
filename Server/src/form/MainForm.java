/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import domain.Radnik;
import java.io.IOException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import thread.ServerThread;

/**
 *
 * @author student1
 */
public class MainForm extends javax.swing.JFrame {

    private ServerThread theServerThread;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        jMenuItemServerStop.setEnabled(false);
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuServer = new javax.swing.JMenu();
        jMenuItemServerStart = new javax.swing.JMenuItem();
        jMenuItemServerStop = new javax.swing.JMenuItem();
        jMenuItemCurrentUser = new javax.swing.JMenuItem();
        jMenuConfiguration = new javax.swing.JMenu();
        jMenuItemServerConfiguration = new javax.swing.JMenuItem();
        jMenuItemDatabaseConfiguration = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenuServer.setText("Server");

        jMenuItemServerStart.setText("Pokreni");
        jMenuItemServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemServerStartActionPerformed(evt);
            }
        });
        jMenuServer.add(jMenuItemServerStart);

        jMenuItemServerStop.setText("Stop");
        jMenuItemServerStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemServerStopActionPerformed(evt);
            }
        });
        jMenuServer.add(jMenuItemServerStop);

        jMenuItemCurrentUser.setText("Trenutni korisnik sitema");
        jMenuItemCurrentUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCurrentUserActionPerformed(evt);
            }
        });
        jMenuServer.add(jMenuItemCurrentUser);

        jMenuBar1.add(jMenuServer);

        jMenuConfiguration.setText("Configuration");

        jMenuItemServerConfiguration.setText("Server configuration");
        jMenuConfiguration.add(jMenuItemServerConfiguration);

        jMenuItemDatabaseConfiguration.setText("Database Configuration");
        jMenuConfiguration.add(jMenuItemDatabaseConfiguration);

        jMenuBar1.add(jMenuConfiguration);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemServerStartActionPerformed
        if (theServerThread == null || !theServerThread.isAlive()) {
            try {
                theServerThread = new ServerThread();
                theServerThread.start();

                jMenuItemServerStart.setEnabled(false);
                jMenuItemServerStop.setEnabled(true);

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            System.err.println("Server thread is started");
        }
    }//GEN-LAST:event_jMenuItemServerStartActionPerformed

    private void jMenuItemServerStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemServerStopActionPerformed
        try {
            if (theServerThread.getServerSocket() != null && theServerThread.getServerSocket().isBound()) {
                theServerThread.getServerSocket().close();
                jMenuItemServerStart.setEnabled(true);
                jMenuItemServerStop.setEnabled(false);
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }


    }//GEN-LAST:event_jMenuItemServerStopActionPerformed

    private void jMenuItemCurrentUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCurrentUserActionPerformed
        if (theServerThread != null) {
            List<Radnik> users = theServerThread.getUsers();
            new CurrentUserForm(this, true, users).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Server is not active!");
        }

    }//GEN-LAST:event_jMenuItemCurrentUserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuConfiguration;
    private javax.swing.JMenuItem jMenuItemCurrentUser;
    private javax.swing.JMenuItem jMenuItemDatabaseConfiguration;
    private javax.swing.JMenuItem jMenuItemServerConfiguration;
    private javax.swing.JMenuItem jMenuItemServerStart;
    private javax.swing.JMenuItem jMenuItemServerStop;
    private javax.swing.JMenu jMenuServer;
    // End of variables declaration//GEN-END:variables
}
